import { useParams } from "react-router-dom";
import { MovieDetailResponse, CreditResponse } from "../types/movies";
import useCustomFetch from "../hooks/useCustomFetch";
import { LoadingSpinner } from "../components/LoadingSpinner";

const MovieDetailPage = () => {
  const { movieid } = useParams<{ movieid: string }>();
  const detailUrl = `https://api.themoviedb.org/3/movie/${movieid}`;
  const creditUrl = `https://api.themoviedb.org/3/movie/${movieid}/credits`;

  const {
    data: movie,
    isPending: isMovieLoading,
    isError: isMovieError
  } = useCustomFetch<MovieDetailResponse>(detailUrl, "ko-KR");

  const {
    data: credit,
    isPending: isCreditLoading,
    isError: isCreditError
  } = useCustomFetch<CreditResponse>(creditUrl, "ko-KR");

  if (isMovieLoading || isCreditLoading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <LoadingSpinner />
      </div>
    );
  }

  if (isMovieError || isCreditError || !movie || !credit) {
    return (
      <div className="text-center text-red-500 text-xl mt-10">
        에러가 발생했습니다. 😢
      </div>
    );
  }

  const directors = credit.crew.filter((person) => person.job === "Director");
  const cast = credit.cast.slice(0, 12); // 상위 12명만 보여주기

  return (
    <div className="text-white p-6 space-y-8">
      {/* 상단 배경 및 기본 정보 */}
      <div
        className="h-[400px] rounded-xl bg-cover bg-center relative p-6"
        style={{
          backgroundImage: `url(https://image.tmdb.org/t/p/original${movie.backdrop_path})`,
        }}
      >
        <div className="bg-black/60 absolute inset-0 rounded-xl p-6 flex flex-col justify-end">
          <h1 className="text-4xl font-bold">{movie.title}</h1>
          <p className="text-lg">{movie.release_date.slice(0, 4)}년 | 평점 {movie.vote_average}점 | {movie.runtime}분</p>
          <p className="italic mt-1">{movie.tagline}</p>
        </div>
      </div>

      {/* 줄거리 */}
      <div>
        <h2 className="text-2xl font-semibold mb-2">줄거리</h2>
        <p className="text-gray-300">{movie.overview}</p>
      </div>

      {/* 감독 및 출연진 */}
      <div>
        <h2 className="text-2xl font-semibold mb-4">감독 / 출연</h2>
        <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 gap-4">
          {directors.concat(cast).map((person) => (
            <div key={person.id} className="flex flex-col items-center">
              <img
                src={
                  person.profile_path
                    ? `https://image.tmdb.org/t/p/w185${person.profile_path}`
                    : 'https://via.placeholder.com/185x278?text=No+Image'
                }
                alt={person.name}
                className="w-20 h-20 rounded-full object-cover"
              />
              <p className="text-sm mt-2 text-center">{person.name}</p>
              {"character" in person && (
                <p className="text-xs text-gray-400 text-center">{person.character}</p>
              )}
              {"job" in person && (
                <p className="text-xs text-gray-400 text-center">{person.job}</p>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default MovieDetailPage;